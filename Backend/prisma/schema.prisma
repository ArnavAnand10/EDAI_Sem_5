datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      String    // "ADMIN" or "EMPLOYEE"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  employee   Employee?        // If this user is an employee
  employees  Employee[] @relation("AdminEmployees") // If this user is an admin, list of employees under them
}

model Employee {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String?
  department  String?
  manager     String?
  contactInfo String?
  companyId   Int?
  adminId     Int      // Foreign key: points to User who is admin
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User?   @relation(fields: [userId], references: [id])
  userId   Int?    @unique
  admin    User    @relation("AdminEmployees", fields: [adminId], references: [id])
  company  Company? @relation(fields: [companyId], references: [id])
  skills   EmployeeSkill[]
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String
  industry  String?
  location  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  employees Employee[]
}

model Skill {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  category  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  employeeSkills EmployeeSkill[]
}

model EmployeeSkill {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  skillId     Int
  level       String   // Beginner, Intermediate, Advanced, Expert
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  requestedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
  skill    Skill    @relation(fields: [skillId], references: [id])
}
